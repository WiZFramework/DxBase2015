#pragma once

#include "stdafx.h"

namespace basedx11{

	//--------------------------------------------------------------------------------------
	//	class Player : public GameObject;
	//	用途: プレイヤー
	//--------------------------------------------------------------------------------------
	class Player : public GameObject{
		shared_ptr< StateMachine<Player> >  m_StateMachine;	//ステートマシーン
		//移動の向きを得る
		Vector3 GetAngle();
	public:
		//構築と破棄
		Player(const shared_ptr<Stage>& StagePtr);
		virtual ~Player(){}
		//初期化
		virtual void Create() override;
		//アクセサ
		shared_ptr< StateMachine<Player> > GetStateMachine() const{
			return m_StateMachine;
		}
		//ジャンプ開始
		void StartJump();
		//更新
		virtual void Update() override;
		virtual void Update2() override;
	};

	//--------------------------------------------------------------------------------------
	//	class DefaultState : public ObjState<Player>;
	//	用途: 通常移動
	//--------------------------------------------------------------------------------------
	class DefaultState : public ObjState<Player>
	{
		//--------------------------------------------------------------------------------------
		//	DefaultState(){}
		//	用途: コンストラクタ
		//	戻り値: なし
		//	＊シングルトンのため、Instance()関数を介して呼び出す
		//--------------------------------------------------------------------------------------
		DefaultState(){}
	public:
		//--------------------------------------------------------------------------------------
		//	static DefaultState* Instance();
		//	用途: インスタンスの取得
		//	戻り値: DefaultStateのインスタンス
		//--------------------------------------------------------------------------------------
		static shared_ptr<DefaultState> Instance();
		//--------------------------------------------------------------------------------------
		//	virtual void Enter(
		//	const shared_ptr<Player>& Obj	//ステートを保持するオブジェクト
		//	) = 0;
		//	用途: ステートに入ったときに実行される
		//	戻り値: なし（純粋仮想関数）
		//--------------------------------------------------------------------------------------
		virtual void Enter(const shared_ptr<Player>& Obj)override{}
		//--------------------------------------------------------------------------------------
		//	virtual void Execute(
		//	const shared_ptr<Player>& Obj		//ステートを保持するオブジェクト
		//	) = 0;
		//	用途: Updateのときに実行される
		//	戻り値: なし（純粋仮想関数）
		//--------------------------------------------------------------------------------------
		virtual void Execute(const shared_ptr<Player>& Obj)override;
		//--------------------------------------------------------------------------------------
		//	virtual void Exit(
		//	const shared_ptr<Player>& Obj		//ステートを保持するオブジェクト
		//	) = 0;
		//	用途: ステートを出るときに実行される
		//	戻り値: なし（純粋仮想関数）
		//--------------------------------------------------------------------------------------
		virtual void Exit(const shared_ptr<Player>& Obj)override{}
	};

	//--------------------------------------------------------------------------------------
	//	class JumpState : public ObjState<Player>;
	//	用途: ジャンプ状態
	//--------------------------------------------------------------------------------------
	class JumpState : public ObjState<Player>
	{
		//--------------------------------------------------------------------------------------
		//	JumpState(){}
		//	用途: コンストラクタ
		//	戻り値: なし
		//	＊シングルトンのため、Instance()関数を介して呼び出す
		//--------------------------------------------------------------------------------------
		JumpState(){}
	public:
		//--------------------------------------------------------------------------------------
		//	static shared_ptr<JumpState> Instance();
		//	用途: インスタンスの取得
		//	戻り値: DefaultStateのインスタンス
		//--------------------------------------------------------------------------------------
		static shared_ptr<JumpState> Instance();
		//--------------------------------------------------------------------------------------
		//	virtual void Enter(
		//	const shared_ptr<Player>& Obj	//ステートを保持するオブジェクト
		//	) = 0;
		//	用途: ステートに入ったときに実行される
		//	戻り値: なし（純粋仮想関数）
		//--------------------------------------------------------------------------------------
		virtual void Enter(const shared_ptr<Player>& Obj)override;
		//--------------------------------------------------------------------------------------
		//	virtual void Execute(
		//	const shared_ptr<Player>& Obj		//ステートを保持するオブジェクト
		//	) = 0;
		//	用途: Updateのときに実行される
		//	戻り値: なし（純粋仮想関数）
		//--------------------------------------------------------------------------------------
		virtual void Execute(const shared_ptr<Player>& Obj)override;
		//--------------------------------------------------------------------------------------
		//	virtual void Exit(
		//	const shared_ptr<Player>& Obj		//ステートを保持するオブジェクト
		//	) = 0;
		//	用途: ステートを出るときに実行される
		//	戻り値: なし（純粋仮想関数）
		//--------------------------------------------------------------------------------------
		virtual void Exit(const shared_ptr<Player>& Obj)override{}
	};


}
//endof  basedx11
