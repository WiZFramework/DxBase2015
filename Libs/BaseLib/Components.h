/*!
@file Components.h
@brief コンポーネント（更新系）

@copyright Copyright (c) 2015 WiZ Tamura Hiroki,Yamanoi Yasushi.
*/

#pragma once
#include "stdafx.h"

namespace basedx11{

	class Stage;
	class GameObject;

	//--------------------------------------------------------------------------------------
	//	class Component :public Object, public ShapeInterface;
	/*!
	コンポーネント親クラス
	*/
	//--------------------------------------------------------------------------------------
	class Component :public Object, public ShapeInterface{
	protected:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit Component(
		//		const shared_ptr<GameObject>& GameObjectPtr	//このコンポーネントを所持するゲームオブジェクト
		//	);
		/*!
		@breaf プロテクトコンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		explicit Component(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	virtual ~Component();
		/*!
		@breaf プロテクトデストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~Component();
	public:
		//アクセサ
		//--------------------------------------------------------------------------------------
		//	shared_ptr<GameObject> GetGameObject() const;
		/*!
		@breaf ゲームオブジェクトの取得
		@param なし
		@return	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<GameObject> GetGameObject() const;
		//--------------------------------------------------------------------------------------
		//	bool IsGameObjectActive() const;
		/*!
		@breaf このコンポーネントを所持するゲームオブジェクトが有効かどうかを取得
		@param なし
		@return	ゲームオブジェクトが有効ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsGameObjectActive() const;
		//--------------------------------------------------------------------------------------
		//	void AttachGameObject(
		//		const shared_ptr<GameObject>& GameObjectPtr	//新しいゲームオブジェクト
		//	);
		/*!
		@breaf ゲームオブジェクトを設定する
		@param const shared_ptr<GameObject>& GameObjectPtr	新しいゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void AttachGameObject(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	shared_ptr<Stage> GetStage() const;
		/*!
		@breaf ステージの取得<br />
		ゲームオブジェクトがステージだった場合、そのステージが返る
		@param なし
		@return	このコンポーネントを所持するゲームオブジェクトが所属するステージ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<Stage> GetStage() const;
		//--------------------------------------------------------------------------------------
		//	bool IsUpdateActive() const;
		/*!
		@breaf Updateがアクティブかどうかを得る
		@param なし
		@return	アクティブならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsUpdateActive() const;
		//--------------------------------------------------------------------------------------
		//	bool GetUpdateActive() const;
		/*!
		@breaf Updateがアクティブかどうかを得る
		@param なし
		@return	アクティブならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetUpdateActive() const;
		//--------------------------------------------------------------------------------------
		//	void SetUpdateActive(
		//		bool b	//アクティブかどうか
		//	);
		/*!
		@breaf Updateがアクティブかどうかを設定する
		@param bool b	アクティブかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetUpdateActive(bool b);

		//--------------------------------------------------------------------------------------
		//	bool IsUpdate2Active() const;
		/*!
		@breaf Update2がアクティブかどうかを得る
		@param なし
		@return	アクティブならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsUpdate2Active() const;
		//--------------------------------------------------------------------------------------
		//	bool GetUpdate2Active() const;
		/*!
		@breaf Update2がアクティブかどうかを得る
		@param なし
		@return	アクティブならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetUpdate2Active() const;
		//--------------------------------------------------------------------------------------
		//	void SetUpdate2Active(
		//		bool b	//アクティブかどうか
		//	);
		/*!
		@breaf Update2がアクティブかどうかを設定する
		@param bool b	アクティブかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetUpdate2Active(bool b);
		//--------------------------------------------------------------------------------------
		//	void SetUpdateAllActive(
		//		bool b	//アクティブかどうか
		//	);
		/*!
		@breaf Update及び、Update2がアクティブかどうかを設定する<br />
		UpdateとUpdate2に対して両方同じ値を設定するのと同じ
		@param bool b	アクティブかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetUpdateAllActive(bool b);
		//--------------------------------------------------------------------------------------
		//	bool IsDrawActive() const;
		/*!
		@breaf Drawがアクティブかどうかを得る
		@param なし
		@return	アクティブならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsDrawActive() const;
		//--------------------------------------------------------------------------------------
		//	bool GetDrawActive() const;
		/*!
		@breaf Drawがアクティブかどうかを得る
		@param なし
		@return	アクティブならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetDrawActive() const;
		//--------------------------------------------------------------------------------------
		//	void SetDrawActive(
		//		bool b	//アクティブかどうか
		//	);
		/*!
		@breaf Drawがアクティブかどうかを設定する
		@param bool b	アクティブかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetDrawActive(bool b);
		//操作
		//--------------------------------------------------------------------------------------
		//	virtual void Update2();
		/*!
		@breaf Update2処理
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Update2(){}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};



	//--------------------------------------------------------------------------------------
	//	class Transform : public Component ;
	/*!
	変換クラス
	*/
	//--------------------------------------------------------------------------------------
	class Transform : public Component {
		//--------------------------------------------------------------------------------------
		//	void SetLocalQuaternion(
		//		const Quaternion& quaternion, //回転クオータニオン
		//		bool CalcFlg = true		//すぐに行列計算するかどうか
		//	);
		//--------------------------------------------------------------------------------------
		void SetLocalQuaternion(const Quaternion& quaternion, bool CalcFlg = true);
		//--------------------------------------------------------------------------------------
		//	void SetLocalRotation(
		//		const Vector3& Rot,	//回転ベクトル
		//		bool CalcFlg = true	//すぐに行列計算するかどうか
		//	);
		//--------------------------------------------------------------------------------------
		void SetLocalRotation(const Vector3& Rot, bool CalcFlg = true);
		//--------------------------------------------------------------------------------------
		//	void SetLocalRotation(
		//		float x, //X回転
		//		float y, //Y回転
		//		float z, //Z回転
		//		bool CalcFlg = true	//すぐに行列計算するかどうか
		//	);
		//--------------------------------------------------------------------------------------
		void SetLocalRotation(float x, float y, float z, bool CalcFlg = true);
		//--------------------------------------------------------------------------------------
		//	void SetPosition(
		//		const Vector3& Position, //位置ベクトル
		//		bool CalcFlg = true	//すぐに行列計算するかどうか
		//	);
		//--------------------------------------------------------------------------------------
		void SetLocalPosition(const Vector3& Position, bool CalcFlg = true);
		//--------------------------------------------------------------------------------------
		//	void SetLocalPosition(
		//		float x, //X位置
		//		float y, //Y位置
		//		float z, //Z位置
		//		bool CalcFlg = true //すぐに行列計算するかどうか
		//	);
		/*!
		@breaf ローカル位置を設定する
		@param float x, X位置
		@param float y, Y位置
		@param float z, Z位置
		@param bool CalcFlg = true		すぐに行列計算するかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLocalPosition(float x, float y, float z, bool CalcFlg = true);
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit Transform(
		//		const shared_ptr<GameObject>& GameObjectPtr	//このコンポーネントを所持するゲームオブジェクト
		//	);
		/*!
		@breaf コンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		explicit Transform(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	virtual ~Transform();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~Transform();
		//アクセサ
		//--------------------------------------------------------------------------------------
		//	bool IsPriorityMatrix()const;;
		/*!
		@breaf 行列優先にするかどうか
		@param なし
		@return	行列優先ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsPriorityMatrix()const;
		//--------------------------------------------------------------------------------------
		//	bool GetPriorityMatrix()const;;
		/*!
		@breaf 行列優先にするかどうか
		@param なし
		@return	行列優先ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetPriorityMatrix()const;
		//--------------------------------------------------------------------------------------
		//	void SetPriorityMatrix(
		//	bool b	//行列優先ならtrue
		//	);
		/*!
		@breaf 行列優先にするかどうかをセット.
		＊行列優先にすると自動行列計算は行わない
		@param bool b	行列優先ならtrue
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetPriorityMatrix(bool b);
		//--------------------------------------------------------------------------------------
		//	bool IsPriorityPosition()const;
		/*!
		@breaf 行列計算を位置優先にするかどうか
		@param なし
		@return	位置優先ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsPriorityPosition()const;
		//--------------------------------------------------------------------------------------
		//	bool GetPriorityPosition()const;
		/*!
		@breaf 行列計算を位置優先にするかどうか
		@param なし
		@return	位置優先ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetPriorityPosition()const;
		//--------------------------------------------------------------------------------------
		//	void SetPriorityPosition(
		//	bool b //優先にするかどうか
		//	);
		/*!
		@breaf 行列計算を位置優先にするかどうかをセット
		@param bool b 優先にするかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetPriorityPosition(bool b);
		//--------------------------------------------------------------------------------------
		//	const Matrix4X4& GetBeforeWorldMatrix() const;
		/*!
		@breaf 1ターン前の行列を得る
		@param なし
		@return	1ターン前の行列
		*/
		//--------------------------------------------------------------------------------------
		const Matrix4X4& GetBeforeWorldMatrix() const;
		//--------------------------------------------------------------------------------------
		//	const Matrix4X4& GetBeforeLocalMatrix() const;
		/*!
		@breaf 1ターン前のワールド行列を得る
		@param なし
		@return	1ターン前のワールド行列
		*/
		//--------------------------------------------------------------------------------------
		const Matrix4X4& GetBeforeLocalMatrix() const;
		//--------------------------------------------------------------------------------------
		//	const Vector3& GetBeforeScale() const;
		/*!
		@breaf 1ターン前のスケーリングを得る
		@param なし
		@return	1ターン前のスケーリング
		*/
		//--------------------------------------------------------------------------------------
		const Vector3& GetBeforeScale() const;
		//--------------------------------------------------------------------------------------
		//	const Quaternion& GetBeforeWorldQuaternion() const;
		/*!
		@breaf 1ターン前のワールド回転を得る
		@param なし
		@return	1ターン前のワールド回転
		*/
		//--------------------------------------------------------------------------------------
		const Quaternion& GetBeforeWorldQuaternion() const;
		//--------------------------------------------------------------------------------------
		//	const Quaternion& GetBeforeLocalQuaternion() const;
		/*!
		@breaf 1ターン前のローカル回転を得る
		@param なし
		@return	1ターン前のローカル回転
		*/
		//--------------------------------------------------------------------------------------
		const Quaternion& GetBeforeLocalQuaternion() const;
		//--------------------------------------------------------------------------------------
		//	const Vector3& GetBeforeWorldPosition() const;
		/*!
		@breaf 1ターン前のワールド位置を得る
		@param なし
		@return	1ターン前のワールド位置
		*/
		//--------------------------------------------------------------------------------------
		const Vector3& GetBeforeWorldPosition() const;
		//--------------------------------------------------------------------------------------
		//	const Vector3& GetBeforeLocalPosition() const;
		/*!
		@breaf 1ターン前のローカル位置を得る
		@param なし
		@return	1ターン前のローカル位置
		*/
		//--------------------------------------------------------------------------------------
		const Vector3& GetBeforeLocalPosition() const;
		//--------------------------------------------------------------------------------------
		//	const Matrix4X4& GetWorldMatrix() const;
		/*!
		@breaf ワールド行列を得る
		@param なし
		@return	ワールド行列
		*/
		//--------------------------------------------------------------------------------------
		const Matrix4X4& GetWorldMatrix() const;
		//--------------------------------------------------------------------------------------
		//	void SetWorldMatrix(
		//		const Matrix4X4& WorldMatrix	//ワールド行列
		//	);
		/*!
		@breaf ワールド行列を設定する.
		＊PriorityMatrixが有効のときのみ設定できる。無効の場合は例外
		@param const Matrix4X4& WorldMatrix	ワールド行列
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetWorldMatrix(const Matrix4X4& WorldMatrix);
		//--------------------------------------------------------------------------------------
		//	const Vector3& GetScale() const;
		/*!
		@breaf スケーリングを得る
		@param なし
		@return	スケーリング
		*/
		//--------------------------------------------------------------------------------------
		const Vector3& GetScale() const;
		//--------------------------------------------------------------------------------------
		//	void SetScale(
		//		const Vector3& Scale	//スケーリング 
		//	);
		/*!
		@breaf スケーリングを設定する.
		@param const Vector3& Scale	スケーリング
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetScale(const Vector3& Scale);
		//--------------------------------------------------------------------------------------
		//	void SetScale(
		//		float x, //Xスケーリング
		//		float y, //Yスケーリング
		//		float z //Zスケーリング
		//	);
		/*!
		@breaf スケーリングを設定する.
		@param float x Xスケーリング
		@param float y Yスケーリング
		@param float z Zスケーリング
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetScale(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		//	const Quaternion& GetQuaternion() const;
		/*!
		@breaf ワールド回転を得る
		@param なし
		@return	ワールド回転（クオータニオン）
		*/
		//--------------------------------------------------------------------------------------
		const Quaternion& GetQuaternion() const;
		//--------------------------------------------------------------------------------------
		//	void SetWorldQuaternion(
		//		const Quaternion& quaternion	//クオータニオン
		//	);
		/*!
		@breaf ワールド回転を設定する
		@param const Quaternion& quaternion	クオータニオン
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetQuaternion(const Quaternion& quaternion);
		//--------------------------------------------------------------------------------------
		//	Vector3 GetRotation() const;
		/*!
		@breaf ワールド回転を得る
		@param なし
		@return	ワールド回転（ベクトル）
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetRotation() const;
		//--------------------------------------------------------------------------------------
		//	void SetRotation(
		//		const Vector3& Rot	//回転ベクトル
		//	);
		/*!
		@breaf ワールド回転を設定する.
		＊すぐに行列に反映する
		@param const Vector3& Rot	回転ベクトル
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetRotation(const Vector3& Rot);
		//--------------------------------------------------------------------------------------
		//	void SetRotation(
		//		float x, //X回転
		//		float y, //Y回転
		//		float z	//Z回転
		//	);
		/*!
		@breaf ワールド回転を設定する.
		＊すぐに行列に反映する
		@param float x,	X回転
		@param float y,	Y回転
		@param float z,	Z回転
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetRotation(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		//	const Vector3& GetPosition() const;
		/*!
		@breaf ワールド位置を得る
		@param なし
		@return	ワールド位置
		*/
		//--------------------------------------------------------------------------------------
		const Vector3& GetPosition() const;
		//--------------------------------------------------------------------------------------
		//	void SetPosition(
		//		const Vector3& Position	//設定する位置
		//	);
		/*!
		@breaf ワールド位置を設定する.
		＊すぐに行列に反映する
		@param const Vector3& Position	設定する位置
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetPosition(const Vector3& Position);
		//--------------------------------------------------------------------------------------
		//	void SetPosition(
		//		float x,	//X位置
		//		float y,	//Y位置
		//		float z		//Z位置
		//	);
		/*!
		@breaf ワールド位置を設定する.
		＊すぐに行列に反映する
		@param float x,	X位置
		@param float y,	Y位置
		@param float z,	Z位置
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetPosition(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		//	const Matrix4X4& GetLocalMatrix() const;
		/*!
		@breaf ローカル行列を得る
		@param なし
		@return	ローカル行列
		*/
		//--------------------------------------------------------------------------------------
		const Matrix4X4& GetLocalMatrix() const;
		//--------------------------------------------------------------------------------------
		//	const Quaternion& GetLocalQuaternion() const;
		/*!
		@breaf ローカル回転を得る
		@param なし
		@return	ローカル回転（クオータニオン）
		*/
		//--------------------------------------------------------------------------------------
		const Quaternion& GetLocalQuaternion() const;
		//--------------------------------------------------------------------------------------
		//	Vector3 GetLocalRotation() const;
		/*!
		@breaf ローカル回転を得る
		@param なし
		@return	ローカル回転（ベクトル）
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetLocalRotation() const;
		//--------------------------------------------------------------------------------------
		//	const Vector3& GetLocalPosition() const;
		/*!
		@breaf ローカル位置を得る
		@param なし
		@return	ローカル位置
		*/
		//--------------------------------------------------------------------------------------
		const Vector3& GetLocalPosition() const;

		//--------------------------------------------------------------------------------------
		//	shared_ptr<GameObject> GetParent() const;
		/*!
		@breaf 親を得る
		@param なし
		@return	親ゲームオブジェクトのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<GameObject> GetParent() const;
		//--------------------------------------------------------------------------------------
		//	void SetParent(
		//		const shared_ptr<GameObject>& Ptr	//親ポインタ
		//	);
		/*!
		@breaf 親を設定する
		@param const shared_ptr<GameObject>& Ptr	親ポインタ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParent(const shared_ptr<GameObject>& Ptr);
		//--------------------------------------------------------------------------------------
		//	void ClearParent();
		/*!
		@breaf 親をクリアする。SetParent()にnullptrを渡すのと同じ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void ClearParent();
		//操作
		//--------------------------------------------------------------------------------------
		//	void CalcMatrix();
		/*!
		@breaf 行列計算をする
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void CalcMatrix();
		//--------------------------------------------------------------------------------------
		//	void SetToBefore();
		/*!
		@breaf 情報を一つ前に移す<br />
		各情報はターンごとに1つ前のターン時の情報を持つ<br />
		この関数はその処理を行う
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetToBefore();
		//--------------------------------------------------------------------------------------
		//	void LerpBeforeToNow(
		//		float LerpTime	//補間時間
		//	);
		/*!
		@breaf 1つ前のターンからの指定時間に情報をセットする<br />
		衝突した場合、オブジェクトは前回のターン位置から衝突位置まで戻る必要がある<br />
		この関数はその処理を行う
		@param float LerpTime	補間時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void LerpBeforeToNow(float LerpTime);
		//--------------------------------------------------------------------------------------
		//	virtual void Update()override;
		/*!
		@breaf 更新処理
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Update()override;
		//--------------------------------------------------------------------------------------
		//	virtual void Draw()override;
		/*!
		@breaf 描画処理。デフォルトは何も行わない
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Draw()override{}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	//	class ActionComponent : public Component ;
	/*!
	アクション系コンポーネントの親クラス
	*/
	//--------------------------------------------------------------------------------------
	class ActionComponent : public Component{
	protected:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit ActionComponent(
		//		const shared_ptr<GameObject>& GameObjectPtr	//このコンポーネントを所持するゲームオブジェクト
		//	);
		/*!
		@breaf プロテクトコンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		explicit ActionComponent(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	virtual ~ActionComponent();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~ActionComponent();
		//--------------------------------------------------------------------------------------
		//	void SetRun(
		//		bool b	//Runフラグ
		//	);
		/*!
		@breaf Runフラグをセットする
		@param bool b	Runフラグ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetRun(bool b);
		//--------------------------------------------------------------------------------------
		//	void SetArrived(
		//		bool b	//到着フラグ
		//	);
		/*!
		@breaf 到着フラグをセットする
		@param bool b	到着フラグ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetArrived(bool b);
		//--------------------------------------------------------------------------------------
		//	bool AdditionalNowTime();
		/*!
		@breaf NowTimeを加算して、TotalTimeと比較する
		@param なし
		@return	到着していればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool AdditionalNowTime();
	public:
		//アクセサ
		//--------------------------------------------------------------------------------------
		//	bool IsRun()const;
		/*!
		@breaf 実行中かどうかを得る
		@param なし
		@return	実行中ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsRun()const;
		//--------------------------------------------------------------------------------------
		//	bool GetRun()const;
		/*!
		@breaf 実行中かどうかを得る
		@param なし
		@return	実行中ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetRun()const;
		//--------------------------------------------------------------------------------------
		//	bool IsArrived()const;
		/*!
		@breaf 到着したかどうかを得る
		@param なし
		@return	到着したらtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsArrived()const;
		//--------------------------------------------------------------------------------------
		//	bool GetArrived()const;
		/*!
		@breaf 到着したかどうかを得る
		@param なし
		@return	到着したらtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetArrived()const;
		//--------------------------------------------------------------------------------------
		//	virtual float GetTotalTime() const;
		/*!
		@breaf トータル時間を得る
		@param なし
		@return　このアクションのトータル時間
		*/
		//--------------------------------------------------------------------------------------
		virtual float GetTotalTime() const;
		//--------------------------------------------------------------------------------------
		//	virtual void SetTotalTime(
		//	float f	//トータル時間
		//	);
		/*!
		@breaf トータル時間を設定する
		@param float f　トータル時間
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetTotalTime(float f);
		//--------------------------------------------------------------------------------------
		//	virtual float GetNowTime() const;
		/*!
		@breaf 現在時間を得る
		@param なし
		@return　このアクションの現在時間
		*/
		//--------------------------------------------------------------------------------------
		virtual float GetNowTime() const;
		//--------------------------------------------------------------------------------------
		//	virtual void SetNowTime(
		//	float f	//現在時間
		//	);
		/*!
		@breaf 現在時間を設定する
		@param float f　現在時間
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetNowTime(float f);
		//操作
		//--------------------------------------------------------------------------------------
		//	virtual void Run() = 0;
		/*!
		@breaf アクションを実行する（純粋仮想関数）
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Run() = 0;
		//--------------------------------------------------------------------------------------
		//	virtual void Stop();
		/*!
		@breaf アクションを止める
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Stop();
		//--------------------------------------------------------------------------------------
		//	virtual void ReStart();
		/*!
		@breaf アクションを再スタートする
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void ReStart();
		//--------------------------------------------------------------------------------------
		//	virtual void Draw()override;
		/*!
		@breaf 描画、空関数（Drawは基本的に行わない）
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Draw()override{}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	//	class ActionInterval : public  ActionComponent ;
	/*!
	アクションのインターバル（何もしないアクション）
	*/
	//--------------------------------------------------------------------------------------
	class ActionInterval : public  ActionComponent{
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit ActionInterval(
		//		const shared_ptr<GameObject>& GameObjectPtr //所持するゲームオブジェクト
		//	);
		/*!
		@breaf コンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		explicit ActionInterval(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	virtual ~ActionInterval();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~ActionInterval();
		//--------------------------------------------------------------------------------------
		//	SetParams(
		//	float TotalTime	//トータルタイム（何もしない時間）
		//	);
		/*!
		@breaf パラメータを設定する
		@param float TotalTime	トータルタイム（何もしない時間）
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParams(float TotalTime);
		//--------------------------------------------------------------------------------------
		//	virtual void Run()override;
		/*!
		@breaf アクションを実行する
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Run()override;
		//--------------------------------------------------------------------------------------
		//	virtual void Update()override;
		/*!
		@breaf 更新処理
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Update()override;
	};


	//--------------------------------------------------------------------------------------
	//	class ScaleComponent : public ActionComponent ;
	/*!
	拡大縮小アクションの親クラス
	*/
	//--------------------------------------------------------------------------------------
	class ScaleComponent : public ActionComponent{
	protected:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit ScaleComponent(
		//		const shared_ptr<GameObject>& GameObjectPtr //所持するゲームオブジェクト
		//	);
		/*!
		@breaf プロテクトコンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		explicit ScaleComponent(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	virtual ~ScaleComponent();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~ScaleComponent();
	public:
		//アクセサ
		//--------------------------------------------------------------------------------------
		//	Lerp::rate GetRate() const;
		/*!
		@breaf 補間方法を得る
		@param なし
		@return　補間方法
		*/
		//--------------------------------------------------------------------------------------
		Lerp::rate GetRate() const;
		//--------------------------------------------------------------------------------------
		//	void SetRate(
		//		const Lerp::rate r	//補間方法
		//	);
		/*!
		@breaf 補間方法を設定する
		@param const Lerp::rate r	補間方法
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetRate(const Lerp::rate r);
		//--------------------------------------------------------------------------------------
		//	const Vector3& GetStartScale() const;
		/*!
		@breaf 最初のスケールを得る
		@param なし
		@return　最初のスケール
		*/
		//--------------------------------------------------------------------------------------
		const Vector3& GetStartScale() const;
		//--------------------------------------------------------------------------------------
		//	void SetStartScale(
		//		const Vector3& StartScale	//最初のスケール
		//	);
		/*!
		@breaf 最初のスケールを設定する
		@param const Vector3& StartScale	最初のスケール
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetStartScale(const Vector3& StartScale);
		//--------------------------------------------------------------------------------------
		//	void SetStartScale(
		//		float x,	//Xスケーリング
		//		float y,	//Yスケーリング
		//		float z		//Zスケーリング
		//	);
		/*!
		@breaf 最初のスケールを設定する
		@param　float x,　Xスケーリング
		@param　float y,　Yスケーリング
		@param　float z	　Zスケーリング
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetStartScale(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		//	const Vector3& GetTargetScale() const;
		/*!
		@breaf 目的のスケールを得る
		@param なし
		@return　目的のスケール
		*/
		//--------------------------------------------------------------------------------------
		const Vector3& GetTargetScale() const;
		//--------------------------------------------------------------------------------------
		//	void SetTargetScale(
		//		const Vector3& TargetScale	//目的のスケール
		//	);
		/*!
		@breaf 目的のスケールを設定する
		@param const Vector3& TargetScale	目的のスケール
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetTargetScale(const Vector3& TargetScale);
		//--------------------------------------------------------------------------------------
		//	void SetTargetScale(
		//		float x,	//Xスケーリング
		//		float y,	//Yスケーリング
		//		float z		//Zスケーリング
		//	);
		/*!
		@breaf 目的のスケールを設定する
		@param　float x,　Xスケーリング
		@param　float y,　Yスケーリング
		@param　float z	　Zスケーリング
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetTargetScale(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		//	Vector3 GetNowScale() const;
		/*!
		@breaf 現在スケールを計算して返す。<br />
		タイムの更新は行わないので、Update後に呼ぶべき
		@param なし
		@return　現在スケール
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetNowScale() const;
		//操作
		//--------------------------------------------------------------------------------------
		//	virtual void Run()override;
		/*!
		@breaf アクションを実行する
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Run()override;
		//--------------------------------------------------------------------------------------
		//	virtual void Update()override;
		/*!
		@breaf 更新処理
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Update()override;
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	//	class ScaleTo : public  ScaleComponent ;
	/*!
	目的の拡大率に拡大縮小
	*/
	//--------------------------------------------------------------------------------------
	class ScaleTo : public  ScaleComponent{
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit ScaleTo(
		//		const shared_ptr<GameObject>& GameObjectPtr //所持するゲームオブジェクト
		//	);
		/*!
		@breaf コンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		explicit ScaleTo(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	virtual ~ScaleTo();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~ScaleTo();
		//--------------------------------------------------------------------------------------
		//	void SetParams(
		//		float TotalTime,		//トータル時間
		//		const Vector3& TargetScale,	//目的のスケーリング
		//		Lerp::rate Rate = Lerp::Linear	//補間方法（デフォルト線形）
		//	);
		/*!
		@breaf パラメータを設定する
		@param　float TotalTime,		トータル時間
		@param　const Vector3& TargetScale,	目的のスケーリング
		@param　Lerp::rate Rate = Lerp::Linear	補間方法（デフォルト線形）
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParams(float TotalTime, const Vector3& TargetScale, Lerp::rate Rate = Lerp::Linear);
	};

	//--------------------------------------------------------------------------------------
	//	class ScaleBy : public  ScaleComponent;
	/*!
	目的の相対スケールにに拡大縮小
	*/
	//--------------------------------------------------------------------------------------
	class ScaleBy : public  ScaleComponent{
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit ScaleBy(
		//		const shared_ptr<GameObject>& GameObjectPtr //所持するゲームオブジェクト
		//	);
		/*!
		@breaf コンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		explicit ScaleBy(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	virtual ~ScaleBy();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~ScaleBy();
		//アクセサ
		//--------------------------------------------------------------------------------------
		//	const Vector3& GetLocalScale() const;
		/*!
		@breaf 目的の相対スケールを得る
		@param なし
		@return　目的の相対スケール
		*/
		//--------------------------------------------------------------------------------------
		const Vector3& GetLocalScale() const;
		//--------------------------------------------------------------------------------------
		//	void SetLocalScale(
		//		const Vector3& LocalScale	//目的の相対スケール
		//	);
		/*!
		@breaf 目的の相対スケールを設定する
		@param const Vector3& LocalScale	目的の相対スケール
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLocalScale(const Vector3& LocalScale);
		//--------------------------------------------------------------------------------------
		//	void SetLocalScale(
		//		float x,	//Xスケーリング
		//		float y,	//Yスケーリング
		//		float z		//Zスケーリング
		//	);
		/*!
		@breaf 目的の相対スケールを設定する
		@param　float x,　Xスケーリング
		@param　float y,　Yスケーリング
		@param　float z	　Zスケーリング
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLocalScale(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		//	void SetParams(
		//		float TotalTime,		//トータル時間
		//		const Vector3& LocalScale,	//目的の相対スケーリング
		//		Lerp::rate Rate = Lerp::Linear	//補間方法（デフォルト線形）
		//	);
		/*!
		@breaf パラメータを設定する
		@param　float TotalTime,		トータル時間
		@param　const Vector3& LocalScale,	目的の相対スケーリング
		@param　Lerp::rate Rate = Lerp::Linear	補間方法（デフォルト線形）
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParams(float TotalTime, const Vector3& LocalScale, Lerp::rate Rate = Lerp::Linear);
		//操作
		//--------------------------------------------------------------------------------------
		//	virtual void Run()override;
		/*!
		@breaf アクションを実行する
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Run()override;
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	//	class RotateComponent : public ActionComponent;
	/*!
	回転アクションの親クラス
	*/
	//--------------------------------------------------------------------------------------
	class RotateComponent : public ActionComponent{
	protected:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit RotateComponent(
		//		const shared_ptr<GameObject>& GameObjectPtr //所持するゲームオブジェクト
		//	);
		/*!
		@breaf プロテクトコンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		explicit RotateComponent(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	virtual ~RotateComponent();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~RotateComponent();
	public:
		//アクセサ
		//--------------------------------------------------------------------------------------
		//	const Quaternion& GetStartQuaternion() const;
		/*!
		@breaf 最初のクオータニオンを得る
		@param なし
		@return　最初のクオータニオン
		*/
		//--------------------------------------------------------------------------------------
		const Quaternion& GetStartQuaternion() const;
		//--------------------------------------------------------------------------------------
		//	void SetStartQuaternion(
		//		const Quaternion& StartQuaternion	//最初のクオータニオン
		//	);
		/*!
		@breaf 最初のクオータニオンを設定する
		@param const Quaternion& StartQuaternion	最初のクオータニオン
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetStartQuaternion(const Quaternion& StartQuaternion);
		//--------------------------------------------------------------------------------------
		//	Vector3 GetStartRotate() const;
		/*!
		@breaf 最初の回転ベクトルを計算して得る。<br />
		内部で持っているのはクオータニオンなので計算したベクトルを返す。
		@param なし
		@return　最初の回転ベクトルを計算して返す
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetStartRotate() const;
		//--------------------------------------------------------------------------------------
		//	void SetStartRotate(
		//		const Vector3& StartRotate	//最初の回転ベクトル
		//	);
		/*!
		@breaf 最初の回転ベクトルを設定する。<br />
		内部で持っているのはクオータニオンなので、変換して設定する。
		@param const Vector3& StartRotate	最初の回転ベクトル
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetStartRotate(const Vector3& StartRotate);
		//--------------------------------------------------------------------------------------
		//	void SetStartRotate(
		//		float x,	//X軸回転
		//		float y,	//Y軸回転
		//		float z		//Z軸回転
		//	);
		/*!
		@breaf 最初の回転ベクトルを設定する。<br />
		内部で持っているのはクオータニオンなので、変換して設定する。
		@param　float x,　X軸回転
		@param　float y,　Y軸回転
		@param　float z	　Z軸回転
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetStartRotate(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		//	const Quaternion& GetTargetQuaternion() const;
		/*!
		@breaf 目的のクオータニオンを得る
		@param なし
		@return　目的のクオータニオン
		*/
		//--------------------------------------------------------------------------------------
		const Quaternion& GetTargetQuaternion() const;
		//--------------------------------------------------------------------------------------
		//	void　SetTargetQuaternion(
		//		const Quaternion& TargetQuaternion	//目的のクオータニオン
		//	);
		/*!
		@breaf 目的のクオータニオンを設定する
		@param const Quaternion& TargetQuaternion	目的のクオータニオン
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetTargetQuaternion(const Quaternion& TargetQuaternion);
		//--------------------------------------------------------------------------------------
		//	Vector3 GetTargetRotate() const;
		/*!
		@breaf 目的の回転ベクトルを計算して得る。<br />
		内部で持っているのはクオータニオンなので計算したベクトルを返す。
		@param なし
		@return　目的の回転ベクトルを計算して返す
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetTargetRotate() const;
		//--------------------------------------------------------------------------------------
		//	void SetTargetRotate((
		//		const Vector3& TargetRotate	//目的の回転ベクトル
		//	);
		/*!
		@breaf 目的の回転ベクトルを設定する。<br />
		内部で持っているのはクオータニオンなので、変換して設定する。
		@param const Vector3& TargetRotate	目的の回転ベクトル
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetTargetRotate(const Vector3& TargetRotate);
		//--------------------------------------------------------------------------------------
		//	void SetTargetRotate(
		//		float x,	//X軸回転
		//		float y,	//Y軸回転
		//		float z		//Z軸回転
		//	);
		/*!
		@breaf 目的の回転ベクトルを設定する。<br />
		内部で持っているのはクオータニオンなので、変換して設定する。
		@param　float x,　X軸回転
		@param　float y,　Y軸回転
		@param　float z	　Z軸回転
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetTargetRotate(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		//	Vector3 GetNowRotate() const;
		/*!
		@breaf 現在の回転ベクトルを計算して返す。回転は線形補間のみ対応する<br />
		タイムの更新は行わないので、Update後に呼ぶべき<br />
		内部で持っているのはクオータニオンなので、変換して返す。
		@param なし
		@return　現在の回転ベクトル
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetNowRotate() const;
		//--------------------------------------------------------------------------------------
		//	Quaternion GetNowQuaternion() const;
		/*!
		@breaf 現在の回転クオータニオンを計算して返す。回転は線形補間のみ対応する<br />
		タイムの更新は行わないので、Update後に呼ぶべき
		@param なし
		@return　現在の回転クオータニオンを
		*/
		//--------------------------------------------------------------------------------------
		Quaternion GetNowQuaternion() const;
		//操作
		//--------------------------------------------------------------------------------------
		//	virtual void Run()override;
		/*!
		@breaf アクションを実行する
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Run()override;
		//--------------------------------------------------------------------------------------
		//	virtual void Update()override;
		/*!
		@breaf 更新処理
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Update()override;
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	//	class RotateTo : public RotateComponent;
	/*!
	目的の角度に回転
	*/
	//--------------------------------------------------------------------------------------
	class RotateTo : public  RotateComponent{
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit RotateTo(
		//		const shared_ptr<GameObject>& GameObjectPtr //所持するゲームオブジェクト
		//	);
		/*!
		@breaf コンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		explicit RotateTo(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	virtual ~RotateTo();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~RotateTo();
		//--------------------------------------------------------------------------------------
		//	void SetParams(
		//		float TotalTime,		//トータル時間
		//		const Vector3& TargetRotate	//目的の回転ベクトル
		//	);
		/*!
		@breaf パラメータを設定する<br />
		内部で持っているのはクオータニオンなので、変換して設定する。
		@param　float TotalTime,		トータル時間
		@param　const Vector3& TargetRotate	目的の回転ベクトル
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParams(float TotalTime, const Vector3& TargetRotate);
		//--------------------------------------------------------------------------------------
		//	void SetParams(
		//		float TotalTime,		//トータル時間
		//		const Quaternion& TargetQuaternion	//目的の回転クオータニオン
		//	);
		/*!
		@breaf パラメータを設定する
		@param　float TotalTime,		トータル時間
		@param　const Quaternion& TargetQuaternion	目的の回転クオータニオン
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParams(float TotalTime, const Quaternion& TargetQuaternion);
	};

	//--------------------------------------------------------------------------------------
	//	class RotateBy : public  RotateComponent ;
	//	用途: 目的の相対角度に回転
	//--------------------------------------------------------------------------------------
	class RotateBy : public  RotateComponent{
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit RotateBy(
		//		const shared_ptr<GameObject>& GameObjectPtr //所持するゲームオブジェクト
		//	);
		/*!
		@breaf コンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		explicit RotateBy(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	virtual ~RotateBy();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~RotateBy();
		//アクセサ
		//--------------------------------------------------------------------------------------
		//	const Quaternion& GetLocalQuaternion() const;
		/*!
		@breaf 目的の相対クオータニオンを得る
		@param なし
		@return　目的の相対クオータニオン
		*/
		//--------------------------------------------------------------------------------------
		const Quaternion& GetLocalQuaternion() const;
		//--------------------------------------------------------------------------------------
		//	void　SetLocalQuaternion(
		//		const Quaternion& LocalQuaternion	//目的の相対クオータニオン
		//	);
		/*!
		@breaf 目的の相対クオータニオンを設定する
		@param const Quaternion& LocalQuaternion	目的の相対クオータニオン
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLocalQuaternion(const Quaternion& LocalQuaternion);
		//--------------------------------------------------------------------------------------
		//	Vector3 GetLocalRotate() const;
		/*!
		@breaf 目的の相対回転ベクトルを計算して得る。<br />
		内部で持っているのはクオータニオンなので計算したベクトルを返す。
		@param なし
		@return　目的の相対回転ベクトルを計算して返す
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetLocalRotate() const;
		//--------------------------------------------------------------------------------------
		//	void SetLocalRotate((
		//		const Vector3& LocalRotate	//目的の相対回転ベクトル
		//	);
		/*!
		@breaf 目的の相対回転ベクトルを設定する。<br />
		内部で持っているのはクオータニオンなので、変換して設定する。
		@param const Vector3& LocalRotate	目的の相対回転ベクトル
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLocalRotate(const Vector3& LocalRotate);
		//--------------------------------------------------------------------------------------
		//	void SetLocalRotate(
		//		float x,	//X軸回転
		//		float y,	//Y軸回転
		//		float z		//Z軸回転
		//	);
		/*!
		@breaf 目的の相対回転ベクトルを設定する。<br />
		内部で持っているのはクオータニオンなので、変換して設定する。
		@param　float x,　X軸回転
		@param　float y,　Y軸回転
		@param　float z	　Z軸回転
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLocalRotate(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		//	void SetParams(
		//		float TotalTime,		//トータル時間
		//		const Vector3& LocalRotate	//目的の相対回転ベクトル
		//	);
		/*!
		@breaf パラメータを設定する<br />
		内部で持っているのはクオータニオンなので、変換して設定する。
		@param　float TotalTime,		トータル時間
		@param　const Vector3& LocalRotate	目的の相対回転ベクトル
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParams(float TotalTime, const Vector3& LocalRotate);
		//--------------------------------------------------------------------------------------
		//	void SetParams(
		//		float TotalTime,		//トータル時間
		//		const Quaternion& LocalQuaternion	//目的の相対回転クオータニオン
		//	);
		/*!
		@breaf パラメータを設定する
		@param　float TotalTime,		トータル時間
		@param　const Quaternion& LocalQuaternion	目的の相対回転クオータニオン
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParams(float TotalTime, const Quaternion& LocalQuaternion);
		//操作
		//--------------------------------------------------------------------------------------
		//	virtual void Run()override;
		/*!
		@breaf アクションを実行する
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Run()override;
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};


	//--------------------------------------------------------------------------------------
	//	class MoveComponent : public ActionComponent;
	/*!
	移動アクションの親クラス
	*/
	//--------------------------------------------------------------------------------------
	class MoveComponent : public ActionComponent{
		void CalcVelocity();
		Vector3 CalcVelocitySub(float NowTime);
	protected:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit MoveComponent(
		//		const shared_ptr<GameObject>& GameObjectPtr //所持するゲームオブジェクト
		//	);
		/*!
		@breaf プロテクトコンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		explicit MoveComponent(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	virtual ~MoveComponent();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~MoveComponent();
	public:
		//アクセサ
		//--------------------------------------------------------------------------------------
		//	Lerp::rate GetRateX() const;
		/*!
		@breaf X方向の補間方法を得る
		@param なし
		@return　補間方法
		*/
		//--------------------------------------------------------------------------------------
		Lerp::rate GetRateX() const;
		//--------------------------------------------------------------------------------------
		//	Lerp::rate GetRateY() const;
		/*!
		@breaf Y方向の補間方法を得る
		@param なし
		@return　補間方法
		*/
		//--------------------------------------------------------------------------------------
		Lerp::rate GetRateY() const;
		//--------------------------------------------------------------------------------------
		//	Lerp::rate GetRateZ() const;
		/*!
		@breaf Z方向の補間方法を得る
		@param なし
		@return　補間方法
		*/
		//--------------------------------------------------------------------------------------
		Lerp::rate GetRateZ() const;
		//--------------------------------------------------------------------------------------
		//	void SetRateX(
		//		const Lerp::rate r	//補間方法
		//	);
		/*!
		@breaf X方向の補間方法を設定する
		@param const Lerp::rate r	補間方法
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetRateX(const Lerp::rate r);
		//--------------------------------------------------------------------------------------
		//	void SetRateY(
		//		const Lerp::rate r	//補間方法
		//	);
		/*!
		@breaf Y方向の補間方法を設定する
		@param const Lerp::rate r	補間方法
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetRateY(const Lerp::rate r);
		//--------------------------------------------------------------------------------------
		//	void SetRateZ(
		//		const Lerp::rate r	//補間方法
		//	);
		/*!
		@breaf Z方向の補間方法を設定する
		@param const Lerp::rate r	補間方法
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetRateZ(const Lerp::rate r);
		//--------------------------------------------------------------------------------------
		//	void SetRateAll(
		//		const Lerp::rate r	//補間方法
		//	);
		/*!
		@breaf XYZ全方向の補間方法を同じに設定する
		@param const Lerp::rate r	補間方法
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetRateAll(const Lerp::rate r);
		//--------------------------------------------------------------------------------------
		//	void SetRateAll(
		//		const Lerp::rate rX,	//補間方法X
		//		const Lerp::rate rY,	//補間方法Y
		//		const Lerp::rate rZ,	//補間方法Z
		//	);
		/*!
		@breaf XYZ全方向の補間方法を別々に設定する
		@param const Lerp::rate rX	//補間方法X
		@param const Lerp::rate rY	//補間方法Y
		@param const Lerp::rate rZ	//補間方法Z
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetRateAll(const Lerp::rate rX,const Lerp::rate rY,const Lerp::rate rZ);
		//--------------------------------------------------------------------------------------
		//	const Vector3& GetStartPosition() const;
		/*!
		@breaf 最初の位置を得る
		@param なし
		@return　最初の位置
		*/
		//--------------------------------------------------------------------------------------
		const Vector3& GetStartPosition() const;
		//--------------------------------------------------------------------------------------
		//	void SetStartPosition(
		//		const Vector3& StartPosition	//位置
		//	);
		/*!
		@breaf 最初の位置を設定する
		@param const Vector3& StartPosition	位置
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetStartPosition(const Vector3& StartPosition);
		//--------------------------------------------------------------------------------------
		//	void SetStartPosition(
		//		float x,	//位置X
		//		float y,	//位置Y
		//		float z		//位置Z
		//	);
		/*!
		@breaf 最初の位置を設定する
		@param float x,	位置X
		@param float y,	位置Y
		@param float z	位置Z
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetStartPosition(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		//	const Vector3& GetTargetPosition() const;
		/*!
		@breaf 目的の位置を得る
		@param なし
		@return　目的の位置
		*/
		//--------------------------------------------------------------------------------------
		const Vector3& GetTargetPosition() const;
		//--------------------------------------------------------------------------------------
		//	void SetTargetPosition(
		//		const Vector3& TargetPosition	//位置
		//	);
		/*!
		@breaf 目的の位置を設定する
		@param const Vector3& TargetPosition	位置
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetTargetPosition(const Vector3& TargetPosition);
		//--------------------------------------------------------------------------------------
		//	void SetTargetPosition(
		//		float x,	//位置X
		//		float y,	//位置Y
		//		float z		//位置Z
		//	);
		/*!
		@breaf 目的の位置を設定する
		@param float x,	位置X
		@param float y,	位置Y
		@param float z	位置Z
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetTargetPosition(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		//	Vector3 GetVelocity()const;
		/*!
		@breaf 現在速度を計算して返す。<br />
		到着していたりRunしてなければ速度0を返す
		@param なし
		@return　現在速度
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetVelocity()const;
		//--------------------------------------------------------------------------------------
		//	Vector3 GetNowPosition() const;
		/*!
		@breaf 現在位置を計算して返す。<br />
		タイムの更新は行わないのでUpdate後に呼ぶべき
		@param なし
		@return　現在速度
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetNowPosition() const;
		//操作
		//--------------------------------------------------------------------------------------
		//	virtual void Run()override;
		/*!
		@breaf アクションを実行する
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Run()override;
		//--------------------------------------------------------------------------------------
		//	virtual void Update()override;
		/*!
		@breaf 更新処理
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Update()override;
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	//	class MoveTo : public  MoveComponent;
	/*!
	目的の位置に移動
	*/
	//--------------------------------------------------------------------------------------
	class MoveTo : public  MoveComponent{
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit MoveTo(
		//		const shared_ptr<GameObject>& GameObjectPtr //所持するゲームオブジェクト
		//	);
		/*!
		@breaf コンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		explicit MoveTo(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	virtual ~MoveTo();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~MoveTo();
		//--------------------------------------------------------------------------------------
		//	void SetParams(
		//		float TotalTime,		//トータル時間
		//		const Vector3& TargetPosition,	//目的の位置
		//		Lerp::rate Rate = Lerp::Linear	//補間方法（デフォルト線形）
		//	);
		/*!
		@breaf パラメータを設定する
		@param　float TotalTime,		トータル時間
		@param　const Vector3& TargetPosition,	目的の位置
		@param　Lerp::rate Rate = Lerp::Linear	補間方法（デフォルト線形）
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParams(float TotalTime, const Vector3& TargetPosition, Lerp::rate Rate = Lerp::Linear);
		//--------------------------------------------------------------------------------------
		//	void SetParams(
		//		float TotalTime,		//トータル時間
		//		const Vector3& TargetPosition,	//目的の位置
		//		Lerp::rate RateX,	//X方向補間
		//		Lerp::rate RateY,	//Y方向補間
		//		Lerp::rate RateZ	//Z方向補間
		//	);
		/*!
		@breaf パラメータを設定する
		@param　float TotalTime,		トータル時間
		@param　const Vector3& TargetPosition,	目的の位置
		@param　Lerp::rate RateX	X方向補間
		@param　Lerp::rate RateY	Y方向補間
		@param　Lerp::rate RateZ	Z方向補間
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParams(float TotalTime, const Vector3& TargetPosition, Lerp::rate RateX, Lerp::rate RateY, Lerp::rate RateZ);
	};

	//--------------------------------------------------------------------------------------
	//	class MoveBy : public  MoveComponent;
	/*!
	目的の相対位置に移動
	*/
	//--------------------------------------------------------------------------------------
	class MoveBy : public  MoveComponent{
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit MoveBy(
		//		const shared_ptr<GameObject>& GameObjectPtr //所持するゲームオブジェクト
		//	);
		/*!
		@breaf コンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		explicit MoveBy(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	virtual ~MoveBy();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~MoveBy();
		//アクセサ
		//--------------------------------------------------------------------------------------
		//	const Vector3& GetLocalVector() const;
		/*!
		@breaf 目的の相対方向を得る
		@param なし
		@return　目的の相対方向
		*/
		//--------------------------------------------------------------------------------------
		const Vector3& GetLocalVector() const;
		//--------------------------------------------------------------------------------------
		//	void SetLocalVector(
		//		const Vector3& LocalVector	//相対方向
		//	);
		/*!
		@breaf 目的の位置を設定する
		@param const Vector3& LocalVector	相対方向
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLocalVector(const Vector3& LocalVector);
		//--------------------------------------------------------------------------------------
		//	void SetLocalVector(
		//		float x,	//方向X
		//		float y,	//方向Y
		//		float z		//方向Z
		//	);
		/*!
		@breaf 目的の相対方向を設定する
		@param float x,	方向X
		@param float y,	方向Y
		@param float z	方向Z
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLocalVector(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		//	void SetParams(
		//		float TotalTime,		//トータル時間
		//		const Vector3& LocalVector,	//目的の相対方向
		//		Lerp::rate Rate = Lerp::Linear	//補間方法（デフォルト線形）
		//	);
		/*!
		@breaf パラメータを設定する
		@param　float TotalTime,		トータル時間
		@param　const Vector3& LocalVector,		目的の相対方向
		@param　Lerp::rate Rate = Lerp::Linear	補間方法（デフォルト線形）
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParams(float TotalTime, const Vector3& LocalVector, Lerp::rate Rate = Lerp::Linear);
		//--------------------------------------------------------------------------------------
		//	void SetParams(
		//		float TotalTime,		//トータル時間
		//		const Vector3& LocalVector,	//目的の相対方向
		//		Lerp::rate RateX,	//X方向補間
		//		Lerp::rate RateY,	//Y方向補間
		//		Lerp::rate RateZ	//Z方向補間
		//	);
		/*!
		@breaf パラメータを設定する
		@param　float TotalTime,		トータル時間
		@param　const Vector3& LocalVector,	目的の相対方向
		@param　Lerp::rate RateX	X方向補間
		@param　Lerp::rate RateY	Y方向補間
		@param　Lerp::rate RateZ	Z方向補間
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParams(float TotalTime, const Vector3& LocalVector, Lerp::rate RateX, Lerp::rate RateY, Lerp::rate RateZ);
		//操作
		//--------------------------------------------------------------------------------------
		//	virtual void Run()override;
		/*!
		@breaf アクションを実行する
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Run()override;
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};


	//--------------------------------------------------------------------------------------
	//	class Action : public Component;
	/*!
	自動状態変更コンポーネント
	*/
	//--------------------------------------------------------------------------------------
	class Action : public Component{
		void RunSub(vector<shared_ptr<ActionComponent> >& TgtVector, size_t& TgtIndex);
		void StopSub(vector<shared_ptr<ActionComponent> >& TgtVector, size_t& TgtIndex);
		void ReStartSub(vector<shared_ptr<ActionComponent> >& TgtVector, size_t& TgtIndex);
		bool UpdateSub(vector<shared_ptr<ActionComponent> >& TgtVector, size_t& TgtIndex);
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit Action(
		//		const shared_ptr<GameObject>& GameObjectPtr //所持するゲームオブジェクト
		//	);
		/*!
		@breaf コンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		explicit Action(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	virtual ~Action();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~Action();
		//アクセサ
		//--------------------------------------------------------------------------------------
		//	bool IsLooped()const;
		/*!
		@breaf ループするかどうかを得る
		@param なし
		@return　ループするならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsLooped()const;
		//--------------------------------------------------------------------------------------
		//	bool GetLooped()const;
		/*!
		@breaf ループするかどうかを得る
		@param なし
		@return　ループするならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetLooped()const;
		//--------------------------------------------------------------------------------------
		//	void SetLooped(
		//		bool b	//ループするかどうか
		//	);
		/*!
		@breaf ループするかどうかを設定する
		@param bool b	ループするかどうか
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLooped(bool b);
		//--------------------------------------------------------------------------------------
		//	bool IsArrived()const;
		/*!
		@breaf 到着したかどうかを得る<br />
		ループなしで到着したら真になる
		@param なし
		@return　到着したらtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsArrived()const;
		//--------------------------------------------------------------------------------------
		//	bool GetArrived()const;
		/*!
		@breaf 到着したかどうかを得る<br />
		ループなしで到着したら真になる
		@param なし
		@return　到着したらtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetArrived()const;
		//--------------------------------------------------------------------------------------
		//	Vector3 GetVelocity() const;
		/*!
		@breaf 現在の速度を得る<br />
		Moveコンポーネントがない場合はVector3(0,0,0)を返す
		@param なし
		@return　現在の速度
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetVelocity() const;
		//--------------------------------------------------------------------------------------
		//	size_t GetScaleActiveIndex() const;
		/*!
		@breaf スケーリングアクションの現在のインデックスを得る<br />
		スケーリングアクションが存在しなければ例外
		@param なし
		@return　現在のインデックス
		*/
		//--------------------------------------------------------------------------------------
		size_t GetScaleActiveIndex() const;
		//--------------------------------------------------------------------------------------
		//	size_t GetRotateActiveIndex() const;
		/*!
		@breaf 回転アクションの現在のインデックスを得る<br />
		回転アクションが存在しなければ例外
		@param なし
		@return　現在のインデックス
		*/
		//--------------------------------------------------------------------------------------
		size_t GetRotateActiveIndex() const;
		//--------------------------------------------------------------------------------------
		//	size_t GetMoveActiveIndex() const;
		/*!
		@breaf 移動アクションの現在のインデックスを得る<br />
		移動アクションが存在しなければ例外
		@param なし
		@return　現在のインデックス
		*/
		//--------------------------------------------------------------------------------------
		size_t GetMoveActiveIndex() const;
		//--------------------------------------------------------------------------------------
		//	shared_ptr<ScaleTo> AddScaleTo(
		//		float TotalTime,		//トータル時間
		//		const Vector3& TargetScale,	//目的のスケーリング
		//		Lerp::rate Rate = Lerp::Linear	//補間方法
		//	);
		/*!
		@breaf ScaleToアクションを追加する
		@param なし
		@return　追加したアクションのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<ScaleTo> AddScaleTo(float TotalTime, const Vector3& TargetScale, Lerp::rate Rate = Lerp::Linear);
		//--------------------------------------------------------------------------------------
		//	shared_ptr<ScaleBy> AddScaleBy(
		//		float TotalTime,		//トータル時間
		//		const Vector3& LocalScale,	//目的の相対スケーリング
		//		Lerp::rate Rate = Lerp::Linear	//補間方法
		//	);
		/*!
		@breaf ScaleByアクションを追加する
		@param なし
		@return　追加したアクションのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<ScaleBy> AddScaleBy(float TotalTime, const Vector3& LocalScale, Lerp::rate Rate = Lerp::Linear);
		//--------------------------------------------------------------------------------------
		//	shared_ptr<ActionInterval> AddScaleInterval(
		//		float TotalTime		//トータル時間
		//	);
		/*!
		@breaf ScaleIntervalアクションを追加する
		@param なし
		@return　追加したアクションのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<ActionInterval> AddScaleInterval(float TotalTime);
		//--------------------------------------------------------------------------------------
		//	shared_ptr<ActionComponent> GetScaleComponent(
		//		size_t TargetIndex	//インデックス
		//	) const;
		/*!
		@breaf 指定したインデックスのスケールコンポーネントを得る
		@param なし
		@return　指定したインデックスのスケールコンポーネント（アクションのポインタ）
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<ActionComponent> GetScaleComponent(size_t TargetIndex) const;
		//--------------------------------------------------------------------------------------
		//	template<typename T>
		//	shared_ptr<T> GeScale(size_t TargetIndex) const;
		/*!
		@breaf T型にキャストした指定したインデックスのスケールコンポーネントを得る
		@param なし
		@return　指定したインデックスのT型のコンポーネント
		*/
		//--------------------------------------------------------------------------------------
		template<typename T>
		shared_ptr<T> GeScale(size_t TargetIndex) const{
			auto Ptr = GetScaleComponent(TargetIndex);
			auto Ptr2 = dynamic_pointer_cast<T>(Ptr);
			if (!Ptr2){
				throw BaseException(
					L"そのコンポーネントはT型にキャストできません",
					L"if(!Ptr)",
					L"Action::GetScale()"
					);
			}
			return Ptr2;
		}
		//--------------------------------------------------------------------------------------
		//	vector<shared_ptr<ActionComponent>>& GetScaleVec() const;
		/*!
		@breaf スケールコンポーネントの配列を得る<br/>
		実際の配列が返るので慎重に操作すること
		@param なし
		@return　スケールコンポーネントの配列の参照
		*/
		//--------------------------------------------------------------------------------------
		vector<shared_ptr<ActionComponent>>& GetScaleVec() const;
		//--------------------------------------------------------------------------------------
		//	shared_ptr<RotateTo> AddRotateTo(
		//		float TotalTime,	//トータル時間
		//		const Vector3& TargetRotate	//目的の回転ベクトル
		//	);
		/*!
		@breaf RotateToアクションを追加する<br/>
		内部で持っているのはクオータニオンなので、変換してセットする
		@param なし
		@return　追加したアクションのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<RotateTo> AddRotateTo(float TotalTime, const Vector3& TargetRotate);
		//--------------------------------------------------------------------------------------
		//	shared_ptr<RotateTo> AddRotateTo(
		//		float TotalTime,	//トータル時間
		//		const Quaternion& TargetQuaternion	//目的の回転クオータニオン
		//	);
		/*!
		@breaf RotateToアクションを追加する
		@param なし
		@return　追加したアクションのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<RotateTo> AddRotateTo(float TotalTime, const Quaternion& TargetQuaternion);
		//--------------------------------------------------------------------------------------
		//	shared_ptr<RotateBy> AddRotateBy(
		//		float TotalTime,	//トータル時間
		//		const Vector3& LocalRotate	//目的の相対回転ベクトル
		//	);
		/*!
		@breaf RotateByアクションを追加する<br/>
		内部で持っているのはクオータニオンなので、変換してセットする
		@param なし
		@return　追加したアクションのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<RotateBy> AddRotateBy(float TotalTime, const Vector3& LocalRotate);
		//--------------------------------------------------------------------------------------
		//	shared_ptr<RotateBy> AddRotateBy(
		//		float TotalTime,	//トータル時間
		//		const Quaternion& LocalQuaternion	//目的の相対回転クオータニオン
		//	);
		/*!
		@breaf　RotateByアクションを追加する
		@param なし
		@return　追加したアクションのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<RotateBy> AddRotateBy(float TotalTime, const Quaternion& LocalQuaternion);
		//--------------------------------------------------------------------------------------
		//	shared_ptr<ActionInterval> AddRotateInterval(
		//		float TotalTime		//トータル時間
		//	);
		/*!
		@breaf RotateIntervalアクションを追加する
		@param なし
		@return　追加したアクションのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<ActionInterval> AddRotateInterval(float TotalTime);
		//--------------------------------------------------------------------------------------
		//	shared_ptr<ActionComponent> GetRotateComponent(
		//		size_t TargetIndex	//インデックス
		//	) const;
		/*!
		@breaf 指定したインデックスの回転コンポーネントを得る
		@param なし
		@return　指定したインデックスの回転コンポーネント（アクションのポインタ）
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<ActionComponent> GetRotateComponent(size_t TargetIndex)const;
		//--------------------------------------------------------------------------------------
		//	template<typename T>
		//	shared_ptr<T> GeRotate(size_t TargetIndex) const;
		/*!
		@breaf T型にキャストした指定したインデックスの回転コンポーネントを得る
		@param なし
		@return　指定したインデックスのT型のコンポーネント
		*/
		//--------------------------------------------------------------------------------------
		template<typename T>
		shared_ptr<T> GeRotate(size_t TargetIndex)const {
			auto Ptr = GetRotateComponent(TargetIndex);
			auto Ptr2 = dynamic_pointer_cast<T>(Ptr);
			if (!Ptr2){
				throw BaseException(
					L"そのコンポーネントはT型にキャストできません",
					L"if(!Ptr)",
					L"Action::GetRotate()"
					);
			}
			return Ptr2;
		}
		//--------------------------------------------------------------------------------------
		//	vector<shared_ptr<ActionComponent>>& GetRotateVec() const;
		/*!
		@breaf 回転コンポーネントの配列を得る<br/>
		実際の配列が返るので慎重に操作すること
		@param なし
		@return　回転コンポーネントの配列の参照
		*/
		//--------------------------------------------------------------------------------------
		vector<shared_ptr<ActionComponent>>& GetRotateVec() const;
		//--------------------------------------------------------------------------------------
		//	shared_ptr<MoveTo> AddMoveTo(
		//		float TotalTime,		//トータル時間
		//		const Vector3& TargetPosition,	//目的の位置
		//		Lerp::rate Rate = Lerp::Linear	//補間方法
		//	);
		/*!
		@breaf MoveToアクションを追加する
		@param なし
		@return　追加したアクションのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<MoveTo> AddMoveTo(float TotalTime, const Vector3& TargetPosition, Lerp::rate Rate = Lerp::Linear);
		//--------------------------------------------------------------------------------------
		//	shared_ptr<MoveTo> AddMoveTo(
		//		float TotalTime,		//トータル時間
		//		const Vector3& TargetPosition,	//目的の位置
		//		Lerp::rate RateX,	//補間方法X
		//		Lerp::rate RateY,	//補間方法Y
		//		Lerp::rate RateZ	//補間方法Z
		//	);
		/*!
		@breaf MoveToアクションを追加する
		@param なし
		@return　追加したアクションのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<MoveTo> AddMoveTo(float TotalTime, const Vector3& TargetPosition, Lerp::rate RateX, Lerp::rate RateY, Lerp::rate RateZ);
		//--------------------------------------------------------------------------------------
		//	shared_ptr<MoveBy> AddMoveBy(
		//		float TotalTime,		//トータル時間
		//		const Vector3& LocalVector,	//目的の相対方向
		//		Lerp::rate Rate = Lerp::Linear	//補間方法
		//	);
		/*!
		@breaf MoveByアクションを追加する
		@param なし
		@return　追加したアクションのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<MoveBy> AddMoveBy(float TotalTime, const Vector3& LocalVector, Lerp::rate Rate = Lerp::Linear);
		//--------------------------------------------------------------------------------------
		//	shared_ptr<MoveBy> AddMoveBy(
		//		float TotalTime,		//トータル時間
		//		const Vector3& LocalVector,	//目的の相対方向
		//		Lerp::rate RateX,	//補間方法X
		//		Lerp::rate RateY,	//補間方法Y
		//		Lerp::rate RateZ	//補間方法Z
		//	);
		/*!
		@breaf MoveByアクションを追加する
		@param なし
		@return　追加したアクションのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<MoveBy> AddMoveBy(float TotalTime, const Vector3& LocalVector, Lerp::rate RateX, Lerp::rate RateY, Lerp::rate RateZ);
		//--------------------------------------------------------------------------------------
		//	shared_ptr<ActionInterval> AddMoveInterval(
		//		float TotalTime		//トータル時間
		//	);
		/*!
		@breaf MoveIntervalアクションを追加する
		@param なし
		@return　追加したアクションのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<ActionInterval> AddMoveInterval(float TotalTime);
		//--------------------------------------------------------------------------------------
		//	shared_ptr<ActionComponent> GetMoveComponent(
		//		size_t TargetIndex	//インデックス
		//	) const;
		/*!
		@breaf 指定したインデックスの移動コンポーネントを得る
		@param なし
		@return　指定したインデックスの移動コンポーネント（アクションのポインタ）
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<ActionComponent> GetMoveComponent(size_t TargetIndex)const;
		//--------------------------------------------------------------------------------------
		//	template<typename T>
		//	shared_ptr<T> GetMove(size_t TargetIndex) const;
		/*!
		@breaf T型にキャストした指定したインデックスの移動コンポーネントを得る
		@param なし
		@return　指定したインデックスのT型のコンポーネント
		*/
		//--------------------------------------------------------------------------------------
		template<typename T>
		shared_ptr<T> GetMove(size_t TargetIndex)const{
			auto Ptr = GetMoveComponent(TargetIndex);
			auto Ptr2 = dynamic_pointer_cast<T>(Ptr);
			if (!Ptr2){
				throw BaseException(
					L"そのコンポーネントはT型にキャストできません",
					L"if(!Ptr)",
					L"Action::GetMove()"
					);
			}
			return Ptr2;
		}
		//--------------------------------------------------------------------------------------
		//	vector<shared_ptr<ActionComponent>>& GetMoveVec() const;
		/*!
		@breaf 移動コンポーネントの配列を得る<br/>
		実際の配列が返るので慎重に操作すること
		@param なし
		@return　移動コンポーネントの配列の参照
		*/
		//--------------------------------------------------------------------------------------
		vector<shared_ptr<ActionComponent>>& GetMoveVec() const;
		//--------------------------------------------------------------------------------------
		//	void AllActionClear();
		/*!
		@breaf すべてのアクションをクリアする
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void AllActionClear();

		//操作
		//--------------------------------------------------------------------------------------
		//	virtual void Run();
		/*!
		@breaf アクションを実行する
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Run();
		//--------------------------------------------------------------------------------------
		//	virtual void Stop();
		/*!
		@breaf アクションを止める
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Stop();
		//--------------------------------------------------------------------------------------
		//	virtual void ReStart();
		/*!
		@breaf アクションを再スタートする
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void ReStart();
		//--------------------------------------------------------------------------------------
		//	virtual void Update()override;
		/*!
		@breaf 更新処理
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Update()override;
		//--------------------------------------------------------------------------------------
		//	virtual void Draw()override;
		/*!
		@breaf 描画処理。空関数
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Draw()override{}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	//	class MultiView: public Component;
	/*!
	マルチビューコンポーネント
	*/
	//--------------------------------------------------------------------------------------
	class MultiView : public Component{
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit MultiView(
		//		const shared_ptr<GameObject>& GameObjectPtr //所持するゲームオブジェクト
		//	);
		/*!
		@breaf コンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		explicit MultiView(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	virtual ~MultiView();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~MultiView();
		//アクセサ
		//--------------------------------------------------------------------------------------
		//	size_t GetViewCount() const;
		/*!
		@breaf 含まれるビューの数を得る
		@param なし
		@return　含まれるビューの数
		*/
		//--------------------------------------------------------------------------------------
		size_t GetViewCount() const;
		//--------------------------------------------------------------------------------------
		//	shared_ptr<View> GetView(
		//		size_t Index	//インデックス
		//	) const;
		/*!
		@breaf 指定したインデックスのビューを得る
		@param size_t Index	インデックス
		@return　指定したインデックスのビュー
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<View> GetView(size_t Index) const;
		//--------------------------------------------------------------------------------------
		//	vector< shared_ptr<View> >& GetViewVec()const;
		/*!
		@breaf ビュー配列を得る<br/>
		ViewVecを直接操作する時用
		@param なし
		@return　ビュー配列の参照
		*/
		//--------------------------------------------------------------------------------------
		vector< shared_ptr<View> >& GetViewVec()const;
		//操作
		//--------------------------------------------------------------------------------------
		//	shared_ptr<View> AddView();
		/*!
		@breaf ビューを追加する
		@param なし
		@return　追加したビューのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<View> AddView();
		//--------------------------------------------------------------------------------------
		//	virtual void Update()override;
		/*!
		@breaf 更新処理。
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Update()override;
		//--------------------------------------------------------------------------------------
		//	virtual void Draw()override;
		/*!
		@breaf 描画処理。空関数
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Draw()override{}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	//	class PlayMusic: public Component;
	/*!
	ミュージックコンポーネント
	*/
	//--------------------------------------------------------------------------------------
	class PlayMusic : public Component{
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit PlayMusic(
		//		const shared_ptr<GameObject>& GameObjectPtr //所持するゲームオブジェクト
		//	);
		/*!
		@breaf コンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		PlayMusic(const shared_ptr<GameObject>& GameObjectPtr, const wstring& ResKey);
		//--------------------------------------------------------------------------------------
		//	virtual ~PlayMusic();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PlayMusic();
		//アクセサ
		//--------------------------------------------------------------------------------------
		//	shared_ptr<AudioResource> GetAudioResource() const;
		/*!
		@breaf オーディオリソースを得る
		@param なし
		@return　オーディオリソースのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<AudioResource> GetAudioResource() const;
		//操作
		//--------------------------------------------------------------------------------------
		//	void Start(
		//		size_t LoopCount = 0, //ループ回数（XAUDIO2_LOOP_INFINITEで無限ループ）
		//		float Volume = 1.0f	//ボリューム
		//	);
		/*!
		@breaf 再生開始。
		@param size_t LoopCount = 0,	ループ回数（XAUDIO2_LOOP_INFINITEで無限ループ）
		@param float Volume = 1.0f	//ボリューム
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void Start(size_t LoopCount = 0, float Volume = 1.0f);
		//--------------------------------------------------------------------------------------
		//	void Start(
		//		const XAUDIO2_BUFFER& Buffer, //XAUDIO2_BUFFERの参照
		//		float Volume = 1.0f	//ボリューム
		//	);
		/*!
		@breaf 再生開始。
		@param const XAUDIO2_BUFFER& Buffer XAUDIO2_BUFFERの参照
		@param float Volume = 1.0f	//ボリューム
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void Start(const XAUDIO2_BUFFER& Buffer, float Volume = 1.0f);
		//--------------------------------------------------------------------------------------
		//	void Stop();
		/*!
		@breaf 再生ストップ。
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void Stop();
		//--------------------------------------------------------------------------------------
		//	virtual void Update()override;
		/*!
		@breaf 更新処理。空関数
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Update()override{}
		//--------------------------------------------------------------------------------------
		//	virtual void Draw()override;
		/*!
		@breaf 描画処理。空関数
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Draw()override{}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};


	//--------------------------------------------------------------------------------------
	//	class SoundEffect: public Component;
	/*!
	サウンドエフェクトコンポーネント
	*/
	//--------------------------------------------------------------------------------------
	class SoundEffect : public Component{
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit SoundEffect(
		//		const shared_ptr<GameObject>& GameObjectPtr //所持するゲームオブジェクト
		//	);
		/*!
		@breaf コンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		SoundEffect(const shared_ptr<GameObject>& GameObjectPtr, const wstring& ResKey);
		//--------------------------------------------------------------------------------------
		//	virtual ~SoundEffect();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~SoundEffect();
		//アクセサ
		//--------------------------------------------------------------------------------------
		//	shared_ptr<AudioResource> GetAudioResource() const;
		/*!
		@breaf オーディオリソースを得る
		@param なし
		@return　オーディオリソースのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<AudioResource> GetAudioResource() const;
		//操作
		//--------------------------------------------------------------------------------------
		//	void Start(
		//		size_t LoopCount = 0, //ループ回数（XAUDIO2_LOOP_INFINITEで無限ループ）
		//		float Volume = 1.0f	//ボリューム
		//	);
		/*!
		@breaf 再生開始。
		@param size_t LoopCount = 0,	ループ回数（XAUDIO2_LOOP_INFINITEで無限ループ）
		@param float Volume = 1.0f	//ボリューム
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void Start(size_t LoopCount = 0, float Volume = 1.0f);
		//--------------------------------------------------------------------------------------
		//	void Start(
		//		const XAUDIO2_BUFFER& Buffer, //XAUDIO2_BUFFERの参照
		//		float Volume = 1.0f	//ボリューム
		//	);
		/*!
		@breaf 再生開始。
		@param const XAUDIO2_BUFFER& Buffer XAUDIO2_BUFFERの参照
		@param float Volume = 1.0f	//ボリューム
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void Start(const XAUDIO2_BUFFER& Buffer, float Volume = 1.0f);
		//--------------------------------------------------------------------------------------
		//	void Stop();
		/*!
		@breaf 再生ストップ。
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void Stop();
		//--------------------------------------------------------------------------------------
		//	virtual void Update()override;
		/*!
		@breaf 更新処理。空関数
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Update()override{}
		//--------------------------------------------------------------------------------------
		//	virtual void Draw()override;
		/*!
		@breaf 描画処理。空関数
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Draw()override{}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	//	struct SoundItem;
	/*!
	マルチサウンドで使用するアイテム
	*/
	//--------------------------------------------------------------------------------------
	struct SoundItem{
		weak_ptr<AudioResource> m_AudioResource;
		IXAudio2SourceVoice* m_pSourceVoice;
	};
	//--------------------------------------------------------------------------------------
	//	class MultiSoundEffect: public Component;
	/*!
	マルチサウンドエフェクトコンポーネント
	*/
	//--------------------------------------------------------------------------------------
	class MultiSoundEffect : public Component{
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		//	explicit MultiSoundEffect(
		//		const shared_ptr<GameObject>& GameObjectPtr //所持するゲームオブジェクト
		//	);
		/*!
		@breaf コンストラクタ
		@param const shared_ptr<GameObject>& GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		MultiSoundEffect(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		//	virtual ~MultiSoundEffect();
		/*!
		@breaf デストラクタ
		@param なし
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual ~MultiSoundEffect();
		//アクセサ
		//--------------------------------------------------------------------------------------
		//	shared_ptr<AudioResource> GetAudioResource(
		//		const wstring& ResKey,	//リソースキー
		//		bool ExceptionActive = true	//リソースが見つからない時例外を投げるかどうか
		//	) const;
		/*!
		@breaf オーディオリソースを得る
		@param const wstring& ResKey,	リソースキー
		@param bool ExceptionActive = true	リソースが見つからない時例外を投げるかどうか
		@return　オーディオリソースのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<AudioResource> GetAudioResource(const wstring& ResKey, bool ExceptionActive = true) const;
		//操作
		//--------------------------------------------------------------------------------------
		//	shared_ptr<AudioResource> AddAudioResource(
		//		const wstring& ResKey	//リソースキー
		//	);
		/*!
		@breaf オーディオリソースを追加する
		@param const wstring& ResKey,	リソースキー
		@return　追加したオーディオリソースのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<AudioResource> AddAudioResource(const wstring& ResKey);
		//--------------------------------------------------------------------------------------
		//	void RemoveAudioResource(
		//		const wstring& ResKey	//リソースキー
		//	);
		/*!
		@breaf オーディオリソースを解放する
		@param const wstring& ResKey,	リソースキー
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void RemoveAudioResource(const wstring& ResKey);
		//--------------------------------------------------------------------------------------
		//	void Start(
		//		const wstring& ResKey,	//リソースキー
		//		size_t LoopCount = 0, //ループ回数（XAUDIO2_LOOP_INFINITEで無限ループ）
		//		float Volume = 1.0f	//ボリューム
		//	);
		/*!
		@breaf 再生開始。
		@param const wstring& ResKey,	リソースキー
		@param size_t LoopCount = 0,	ループ回数（XAUDIO2_LOOP_INFINITEで無限ループ）
		@param float Volume = 1.0f	//ボリューム
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void Start(const wstring& ResKey, size_t LoopCount = 0, float Volume = 1.0f);
		//--------------------------------------------------------------------------------------
		//	void Start(
		//		const wstring& ResKey,	//リソースキー
		//		const XAUDIO2_BUFFER& Buffer, //XAUDIO2_BUFFERの参照
		//		float Volume = 1.0f	//ボリューム
		//	);
		/*!
		@breaf 再生開始。
		@param const wstring& ResKey,	リソースキー
		@param const XAUDIO2_BUFFER& Buffer XAUDIO2_BUFFERの参照
		@param float Volume = 1.0f	//ボリューム
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void Start(const wstring& ResKey, const XAUDIO2_BUFFER& Buffer, float Volume = 1.0f);
		//--------------------------------------------------------------------------------------
		//	void Stop(
		//		const wstring& ResKey,	//リソースキー
		//	);
		/*!
		@breaf 再生ストップ。
		@param const wstring& ResKey,	リソースキー
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void Stop(const wstring& ResKey);
		//--------------------------------------------------------------------------------------
		//	virtual void Update()override;
		/*!
		@breaf 更新処理。空関数
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Update()override{}
		//--------------------------------------------------------------------------------------
		//	virtual void Draw()override;
		/*!
		@breaf 描画処理。空関数
		@param なし
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Draw()override{}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};


}
//endof  basedx11
